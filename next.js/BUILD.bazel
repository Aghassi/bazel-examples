load("@npm//:next/package_json.bzl", next_bin = "bin")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary", "js_test")

npm_link_all_packages(name = "node_modules")

# ==============================================================================
# Primary Next.js targets including :build, :dev, :start and :lint
# ==============================================================================

# Source files passed to Next.js targets
filegroup(
    name = "srcs",
    srcs = glob([
        "pages/**",
        "public/**",
        "styles/**",
    ]) + [
        "next-env.d.ts",
        "next.config.js",
        "package.json",
        "tsconfig.json",
    ],
)

# `next build` creates an optimized bundle of the application
# https://nextjs.org/docs/api-reference/cli#build
js_run_binary(
    name = "build",
    srcs = [
        ":node_modules",
        ":srcs",
    ],
    outs = [".next"],
    args = ["build"],
    tool = ":next_bin",
)

# `next dev` runs the application in development mode
# https://nextjs.org/docs/api-reference/cli#development
next_bin.next_binary(
    name = "dev",
    args = ["dev"],
    data = [
        ":node_modules",
        ":srcs",
    ],
    # TODO: Next.js isn't able to detect when to pick update changes
    # when watching the runfiles. This prevents it from rebuilding & refreshing
    # when running under ibazel with `ibazel_notify_changes`
    # tags = ["ibazel_notify_changes"],
)

# `next start` runs the application in production mode
# https://nextjs.org/docs/api-reference/cli#production
next_bin.next_binary(
    name = "start",
    args = ["start"],
    data = [
        ":build",
        ":node_modules",
    ],
    # TODO: Next.js isn't able to detect when to pick update changes
    # when watching the runfiles. This prevents it from rebuilding & refreshing
    # when running under ibazel with `ibazel_notify_changes`
    # tags = ["ibazel_notify_changes"],
)

# `next info` prints relevant details about the current system
# https://nextjs.org/docs/api-reference/cli#info
next_bin.next_binary(
    name = "info",
    args = ["info"],
    data = [
        ":node_modules",
        ":srcs",
    ],
)

# ==============================================================================
# Peripheral targets
# ==============================================================================

# A smoke test on the artifact produced by the :build target
js_test(
    name = "build_smoke_test",
    data = [":build"],
    entry_point = "build_smoke_test.js",
)

# This custom next js_binary is needed since next is very sensitive to it being found in two
# `node_modules` trees. With the standard generated `bin.next` build rule loaded from
# `@npm//:next/package_json.bzl`, next is found both in the binary's runfiles `node_modules` and in
# the execroot's `:node_modules` tree. This breaks the build. The work-around here is to have this
# `next_bin` `js_binary` be an empty shim without any `node_modules` and re-direct from it to run
# next from its execroot `:node_modules/next/dist/bin/next` entry point.
js_binary(
    name = "next_bin",
    entry_point = ":next_entry.js",
)
